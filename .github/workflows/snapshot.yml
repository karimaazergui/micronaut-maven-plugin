name: Java CI

on:
  push:
    branches:
      - master
      - '[1-9]+.[0-9]+.x'
      - central-portal
  pull_request:
    branches:
      - master
      - '[1-9]+.[0-9]+.x'
      - central-portal

jobs:
  snapshot:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ['17', '21']
    env:
      DEVELOCITY_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      DEVELOCITY_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME }}
      DEVELOCITY_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      GRAALVM_QUICK_BUILD: true
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: "🔐 Setup GPG keyring"
        env:
          GPG_FILE: ${{ secrets.GPG_FILE }}
        run: |
          mkdir ~/.gnupg && echo "$GPG_FILE" | base64 -d > ~/.gnupg/secring.gpg
          
          # Verify gpg secret key
          gpg --list-secret-keys --keyid-format LONG

      - name: "☕️ Install Java and Maven and set up Apache Maven Central"
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          cache: 'maven'
          server-id: central
          server-username: SONATYPE_USERNAME
          server-password: SONATYPE_PASSWORD
          gpg-passphrase: GPG_PASSWORD

      - name: "🔧 Setup GraalVM CE"
        uses: graalvm/setup-graalvm@v1.3.4
        with:
          distribution: 'graalvm'
          java-version: ${{ matrix.java }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "⏬ Eagerly pull Docker images"
        run: |
          docker pull postgres:latest

      - name: "🧪 Run tests"
        run: |
          ./mvnw -q install -Dinvoker.skip=true && ./mvnw verify

      - name: "📊 Publish Test Report"
        if: always()
        uses: mikepenz/action-junit-report@v5.6.2
        with:
          check_name: Java CI / Test Report
          report_paths: '**/target/invoker-reports/TEST-*.xml'
          check_retries: 'true'

      - name: "🔎 Run static analysis"
        if: env.SONAR_TOKEN != '' && matrix.java == '17'
        run: ./mvnw sonar:sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "❓ Determine current version"
        if: success() && github.event_name == 'push' && matrix.java == '17'
        id: release_version
        run: echo ::set-output name=release_version::`./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout`

      - name: "🌎 Generate site"
        if: success() && github.event_name == 'push' && matrix.java == '17'
        run: |
          ./mvnw site:site
          cp -R target/site/apidocs/* micronaut-maven-plugin/target/site/apidocs

      - name: "📑 Publish to Github Pages"
        if: success() && github.event_name == 'push' && matrix.java == '17'
        uses: micronaut-projects/github-pages-deploy-action@master
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BRANCH: gh-pages
          FOLDER: micronaut-maven-plugin/target/site

      - name: "📦 Deploy snapshot"
        if: success() && github.event_name == 'push' && endsWith(steps.release_version.outputs.release_version, 'SNAPSHOT') && matrix.java == '17'
        run: |
          ./mvnw deploy -Dinvoker.skip
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}